[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Game_Play",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "functions",
        "description": "functions",
        "isExtraImport": true,
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "Game_Setup",
        "importPath": "functions",
        "description": "functions",
        "isExtraImport": true,
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "Game_Setup",
        "kind": 6,
        "importPath": "game.backup.game_menu",
        "description": "game.backup.game_menu",
        "peekOfCode": "class Game_Setup(Main):\n    def Play_game_setup(self):\n        while True:\n            print(\"\\n\")\n            print(\"===========================================================\")\n            print(\"=                                                         =\")\n            print(\"=      WELCOME TO ROCK, PAPER AND SCISSORS GAME           =\")\n            print(\"=                                                         =\")\n            print(\"===========================================================\")\n            print(\"SELECT ONE OPTION\")",
        "detail": "game.backup.game_menu",
        "documentation": {}
    },
    {
        "label": "Game_options",
        "kind": 6,
        "importPath": "game.backup.game_menu",
        "description": "game.backup.game_menu",
        "peekOfCode": "class Game_options(Game_Setup):\n    def play_with_computer(self):\n        while True:\n            print(\"Lets play rock paper scissors game! \")\n            print(\"---------------------------------------------\")\n            user_input = input(\"Would you like to play rock paper scissors (yes/no): \").lower()\n            if user_input != \"yes\":\n                print(\"Its fine if you dont want to play\")\n                print(\"------------------------------------------\")\n                break",
        "detail": "game.backup.game_menu",
        "documentation": {}
    },
    {
        "label": "Game_Rock_Paper_Scissors",
        "kind": 6,
        "importPath": "game.functions",
        "description": "game.functions",
        "peekOfCode": "class Game_Rock_Paper_Scissors:\n    def __init__(self) :\n        self.choices = [\"rock\", \"paper\", \"scissors\"]\n        # polymorphism\n        self.load_scores()\n    def number():\n        pass\n    # appending to the score.txt file\n    # file handling\n    def load_scores(self):",
        "detail": "game.functions",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "game.functions",
        "description": "game.functions",
        "peekOfCode": "class Main(Game_Rock_Paper_Scissors):\n    # a function which will determine the winner if the choices are the same or different\n    def determine_winner(self, player_choice, computer_choice): \n        if player_choice == computer_choice:\n            # concatinating\n            self.draws += 1\n            return \"It is a tie\"\n        elif (player_choice == \"rock\" and computer_choice == \"scissors\"):\n            self.wins += 1\n            return \"You win!, Rock crushes scissors!\"",
        "detail": "game.functions",
        "documentation": {}
    },
    {
        "label": "Game_Setup",
        "kind": 6,
        "importPath": "game.functions",
        "description": "game.functions",
        "peekOfCode": "class Game_Setup(Main):\n    def Play_game_setup(self):\n        # while loops\n        while True:\n            print(\"\\n\")\n            print(\"===========================================================\")\n            print(\"=                                                         =\")\n            print(\"=      WELCOME TO ROCK, PAPER AND SCISSORS GAME           =\")\n            print(\"=                                                         =\")\n            print(\"===========================================================\")",
        "detail": "game.functions",
        "documentation": {}
    },
    {
        "label": "Game_options",
        "kind": 6,
        "importPath": "game.main",
        "description": "game.main",
        "peekOfCode": "class Game_options(Game_Setup):\n    def play_with_computer(self):\n        while True:\n            print(\"\\n\")\n            print(\" ☆☆☆☆☆☆☆☆☆☆☆ L E T 'S P L A Y ! ☆☆☆☆☆☆☆☆☆☆☆ \")\n            print(\"---------------------------------------------\")\n            user_input = input(\"Would you like to play rock paper scissors (yes/no): \").lower()\n            if user_input != \"yes\":\n                print(\"Its fine if you dont want to play\")\n                print(\"------------------------------------------\")",
        "detail": "game.main",
        "documentation": {}
    },
    {
        "label": "Game_Play",
        "kind": 6,
        "importPath": "game.main",
        "description": "game.main",
        "peekOfCode": "class Game_Play(Game_options):\n    def play_with_friend(self):\n        while True:\n            print(\"\\n\")\n            print(\"☆☆☆☆☆☆☆☆☆☆☆ L E T 'S   P L A Y   T O G E T H E R ! ☆☆☆☆☆☆☆☆☆☆☆ \")\n            print(\"\\n\")\n            player_1_name = input(\"Please enter your username player 1: \").lower()\n            player_2_name = input(\"Please enter your username player 2: \").lower()\n            player_1_choice = self.player_choices()\n            print(f\"\\n{player_2_name}, Please look away...!\")",
        "detail": "game.main",
        "documentation": {}
    }
]